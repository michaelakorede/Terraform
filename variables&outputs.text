In a Terraform project, the variables.tf and outputs.tf files are used to define and manage input parameters (variables) and the output of the Terraform configuration. 
Letâ€™s break down and explain both files:

1. variables.tf (Variable Declaration)
The variables.tf file is where you define the input variables that allow you to parameterize your Terraform configurations. 
This makes your Terraform script more flexible, reusable, and easier to manage across different environments.

// Example from the project:
variable "location" {
  description = "The Azure region to deploy resources in"
  default     = "East US"
}

Explanation:
Variable Declaration:
The variable block defines a variable, in this case, "location". You can think of this as a placeholder for a value that will be provided when Terraform runs.

// Name:
The name of the variable here is "location". This name will be referenced in other Terraform files (such as main.tf) wherever the Azure location is required.

// Description:
The description field is optional but highly recommended. It describes the purpose of the variable. 
In this case, it explains that this variable holds the Azure region where resources will be deployed (e.g., East US, West Europe, etc.).

// Default Value:
The default field sets a default value for the variable, in this case, "East US". 
If no other value is provided when running Terraform, it will use this default value. 
However, if you want to override the default value, you can do so by providing a different value in a separate terraform.tfvars file or when running Terraform commands.

// Benefits of Using Variables:
Reusability: You can change the values of the variables without modifying the entire code.
Consistency: The same configuration can be used across multiple environments (e.g., different regions, production, development).
Simplicity: It keeps the configuration DRY (Don't Repeat Yourself). Instead of hardcoding values like region, you refer to a single variable.

2. outputs.tf (Output Configuration)
The outputs.tf file is used to define the outputs of your Terraform configuration. Outputs are useful for displaying important information after the infrastructure is provisioned. 
They help you capture and share details of the resources that were created by Terraform, such as resource IDs, IP addresses, and connection strings.


output "hub_vnet_id" {
  value = azurerm_virtual_network.hub_vnet.id
}

output "spoke1_vnet_id" {
  value = azurerm_virtual_network.spoke1_vnet.id
}

output "spoke2_vnet_id" {
  value = azurerm_virtual_network.spoke2_vnet.id
}

output "spoke3_vnet_id" {
  value = azurerm_virtual_network.spoke3_vnet.id
}

// Explanation:
Output Declaration:

Each block beginning with output defines an output variable. In this case, we have hub_vnet_id, spoke1_vnet_id, spoke2_vnet_id, and spoke3_vnet_id.

// Name:
The name of the output variable is the key that will be shown when Terraform finishes applying the configuration. For example, 
hub_vnet_id will display the ID of the Hub VNet once the infrastructure is created.

// Value:
The value field tells Terraform what should be output. In this example, it's fetching the ID of the virtual network (VNet) resources.
azurerm_virtual_network.hub_vnet.id: This is referencing the ID of the Hub Virtual Network that was created in the main.tf file.
Similarly, azurerm_virtual_network.spoke1_vnet.id refers to the ID of the Spoke 1 Virtual Network, and so on for Spoke 2 and Spoke 3.

How Outputs Are Used:
For Human Readability: After applying the Terraform configuration, the outputs are displayed in the CLI. This helps you easily reference resource IDs 
or important information without searching for them manually in the Azure Portal.

// For Automation: Outputs can be used as inputs to other Terraform modules or external automation scripts. For example, 
if you want to use the VNet ID in a separate Terraform run, the output can be automatically referenced.

// Integration: You can use outputs to pass values to other tools (e.g., CI/CD pipelines, monitoring scripts).

Benefits of Using Outputs:
// Clarity: Outputs help you quickly identify key resources that Terraform has provisioned, such as VNet IDs, IP addresses, or load balancer URLs.
// Automation: Outputs allow the automated passing of resource details from one part of the infrastructure to another, or between Terraform runs.
// Accessibility: Important values like connection strings or resource IDs can be easily accessed without manually checking the Azure portal.

